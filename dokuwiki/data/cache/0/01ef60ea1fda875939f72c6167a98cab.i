a:177:{i:0;a:3:{i:0;s:14:"document_start";i:1;a:0:{}i:2;i:0;}i:1;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:24:"删除不必要的module";i:1;i:1;i:2;i:1;}i:2;i:1;}i:2;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:1;}i:2;i:1;}i:3;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:1;}i:4;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:359:"AS的代码结构和eclipse完全不同，它为开发者提供了单工程多module的形式。但多建立一个module就需要多维护一个module。所以如果仅仅是为了方便写代码而建立一个module是不可取的，我强烈建议先做好项目结构的梳理再考虑是否需要建立module。
下面是一个多module的app结构图：
";}i:2;i:39;}i:5;a:3:{i:0;s:13:"internalmedia";i:1;a:7:{i:0;s:34:":android:5854-09a8713d38f3e5e0.png";i:1;s:0:"";i:2;s:6:"center";i:3;N;i:4;N;i:5;s:5:"cache";i:6;s:6:"nolink";}i:2;i:398;}i:6;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:12:"
framework  ";}i:2;i:446;}i:7;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:458;}i:8;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:458;}i:9;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:85:"在as中通过自带的预览工具，也可以帮助我们进行modules的梳理：
";}i:2;i:460;}i:10;a:3:{i:0;s:13:"internalmedia";i:1;a:7:{i:0;s:34:":android:5854-eb80ba8ccc6b8623.png";i:1;s:0:"";i:2;s:6:"center";i:3;N;i:4;N;i:5;s:5:"cache";i:6;s:6:"nolink";}i:2;i:545;}i:11;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:499:"
module
这个项目中的module有很多，所以gradle在编译的时候会去检测module的依赖链，gradle会帮助我们层层梳理module之间的关系，避免因为module之间相互引用而来带的问题。这些梳理工作和module的合并工作都会带来build的时间，如果你的项目build十分缓慢，我强烈建议你去梳理下module的关系，合并部分module。将稳定的底层module打包为aar，上传到公司的maven仓库，借此来加快build速度。";}i:2;i:593;}i:12;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:1092;}i:13;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:1095;}i:14;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:30:"删除module中的无用文件";i:1;i:1;i:2;i:1095;}i:2;i:1095;}i:15;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:1;}i:2;i:1095;}i:16;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:1095;}i:17;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:55:"as默认在建立module的同时会建立test目录：
";}i:2;i:1140;}i:18;a:3:{i:0;s:13:"internalmedia";i:1;a:7:{i:0;s:34:":android:5854-28c88a58c559b1bf.png";i:1;s:0:"";i:2;s:6:"center";i:3;N;i:4;N;i:5;s:5:"cache";i:6;s:6:"nolink";}i:2;i:1195;}i:19;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:1243;}i:20;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:1243;}i:21;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:198:"如果你根本没有编写测试代码的打算，你完全可以删除test目录。
当然，如果你的module就是纯代码，根本没用到资源文件，也请一并把res目录删除掉。
";}i:2;i:1245;}i:22;a:3:{i:0;s:13:"internalmedia";i:1;a:7:{i:0;s:34:":android:5854-d57409b8a787f635.png";i:1;s:0:"";i:2;s:6:"center";i:3;N;i:4;N;i:5;s:5:"cache";i:6;s:6:"nolink";}i:2;i:1443;}i:23;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:1491;}i:24;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:1493;}i:25;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:39:"删除主项目中无用的资源文件";i:1;i:1;i:2;i:1493;}i:2;i:1493;}i:26;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:1;}i:2;i:1493;}i:27;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:1493;}i:28;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:393:"项目开发中多少都会存留一些无用的代码和资源，资源越多打包合并资源的时间就越长。然而删除无用的代码对于提升打包速度的作用微乎其微，我们可以利用混淆这一利器在打release包的时候将无用代码一次性剔除掉。对于资源文件，as提供了自动检测失效文件和删除的功能，这个绝对值得一试。";}i:2;i:1547;}i:29;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:1940;}i:30;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:1940;}i:31;a:3:{i:0;s:13:"internalmedia";i:1;a:7:{i:0;s:34:":android:5854-c4dc3da94f87fa3e.png";i:1;s:0:"";i:2;s:6:"center";i:3;N;i:4;N;i:5;s:5:"cache";i:6;s:6:"nolink";}i:2;i:1943;}i:32;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:1991;}i:33;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:1991;}i:34;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:358:"在弹出的对话框中，我强烈建议不要勾选删除无用的id，因为databinding会用到一些id，但这在代码中没有体现，所以as会认为这些id是无用的。如果你删除了这些id，那么就等着编译失败吧。别问我是怎么知道的T_T。顺便说一下，每次做这种操作前记得commit一下，方便做diff。";}i:2;i:1993;}i:35;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:2351;}i:36;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:2351;}i:37;a:3:{i:0;s:13:"internalmedia";i:1;a:7:{i:0;s:34:":android:5854-8d8178346df70bd1.png";i:1;s:0:"";i:2;s:6:"center";i:3;N;i:4;N;i:5;s:5:"cache";i:6;s:6:"nolink";}i:2;i:2354;}i:38;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:2402;}i:39;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:2404;}i:40;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:35:"减少方法数，不使用multidex";i:1;i:2;i:2;i:2404;}i:2;i:2404;}i:41;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:2;}i:2;i:2404;}i:42;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:2404;}i:43;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:72:"关于什么是multidex，和怎么使用它，请参考这篇文章：
";}i:2;i:2451;}i:44;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:54:"http://blog.csdn.net/t12x3456/article/details/40837287";i:1;N;}i:2;i:2523;}i:45;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:583:"
它是一种不得已而为之的举措，在使用的时候我经常会发现在一些特殊的机型上会出现一些奇奇怪怪的错误，总之就是有很多坑。
在build时间这一块，multidex因为有分包和压缩的过程，所以它对于编译速度方面有有严重的影响。我通过dexcount这个插件分析了我们的项目后，发现项目中有一些库已经不再用或者有更好的替代品，于是我精简了第三方库，并且开启了support包的混淆，最终让我们的项目的release包的方法数达到了一个合理的水平。";}i:2;i:2582;}i:46;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:3165;}i:47;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:3165;}i:48;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:124:"为了控制变量，我专门做了一个空项目，用来做support包混淆前后的对比，我们来看一下数据：";}i:2;i:3168;}i:49;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:3292;}i:50;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:3292;}i:51;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:526:"当一个第三方sdk说不要混淆support包，不要混淆我sdk的代码的时候，我强烈建议你考虑下方法数的问题。混淆的作用之一是将代码进行优化和缩短方法名、字段名；作用之二就是删除没有被用到的变量和方法。第三方sdk的方法数众多，如果没办法混淆，那么会带来大量的方法数，这点需要十分的小心。混淆虽然是一个十分有用的工具，但也是很多错误的来源，所以我建议你小心谨慎的多多使用它！";}i:2;i:3294;}i:52;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:3820;}i:53;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:3823;}i:54;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:27:"对第三方库进行优化";i:1;i:2;i:2;i:3823;}i:2;i:3823;}i:55;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:2;}i:2;i:3823;}i:56;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:3823;}i:57;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:99:"上面讲到了优化第三方库会减少方法数，这里简单讲一下一般的优化策略：";}i:2;i:3862;}i:58;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:3961;}i:59;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:3961;}i:60;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:140:"1.利用debugCompile来依赖debug时才用到的库
debugCompile我在第三方库开发实践中已经讲到了，这里就不多说了。";}i:2;i:3963;}i:61;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:4103;}i:62;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:4103;}i:63;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:162:"2.利用更小的库替代现有的库
这个就要看开发人员的经验和知识面了，虽然是废话，如果能真正做到，成果是极其明显的。";}i:2;i:4105;}i:64;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:4267;}i:65;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:4267;}i:66;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:124:"3.利用exclude来排出某些不需要的依赖
以rn举例，rn是一个庞大的库，引入rn后会依赖很多别的库";}i:2;i:4269;}i:67;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:4393;}i:68;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:4393;}i:69;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:353:"在我们的项目中，我利用了自己编写的网络请求模块进行网络请求，所以我就想要剔除掉rn引入的okhttp，我又发现它还引入了support包，而我项目中也肯定有support包，所以我也想要排出掉它（不排除support包也没事，gradle会仅包含最新的库版本，我这里仅仅是举个例子）";}i:2;i:4395;}i:70;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:4754;}i:71;a:3:{i:0;s:4:"code";i:1;a:3:{i:0;s:240:"
  compile ('com.facebook.react:react-native:+'){
    exclude group: 'com.squareup.okhttp3', module: 'okhttp'
    exclude group: 'com.android.support', module: 'support-v4'
    exclude group: 'com.android.support', module: 'support-v7'
  }
";i:1;N;i:2;N;}i:2;i:4754;}i:72;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:4754;}i:73;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:117:"重新build一次后，你会发现okhttp已经被剔除掉了：
对于本地的module也是可以这样处理的：";}i:2;i:5003;}i:74;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:5120;}i:75;a:3:{i:0;s:4:"code";i:1;a:3:{i:0;s:117:"
compile(project(':react-native-custom-module')) {
    exclude group: 'com.facebook.react', module: 'react-native'
}
";i:1;N;i:2;N;}i:2;i:5128;}i:76;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:5255;}i:77;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:24:"debug时跳过某些task";i:1;i:2;i:2;i:5255;}i:2;i:5255;}i:78;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:2;}i:2;i:5255;}i:79;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:5255;}i:80;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:96:"我们的项目中用到了很多gradle插件，有些插件会在build时运行自己的task：";}i:2;i:5292;}i:81;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:5388;}i:82;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:5388;}i:83;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:199:"tiny是用来压缩图片的，buildtime是用来检测build时间的，dexcount是用来分析方法数的。这些插件对于我们的开发带来了巨大的帮助，但也增加了build时间。";}i:2;i:5390;}i:84;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:5589;}i:85;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:5589;}i:86;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:428:"在每次发版本前开启tiny，直接build一次，压缩完图片后将其关闭。
在需要检测和诊断build时间的时候启用buildtime，一般的debug时不开启它。
在release包中开启dexcount，并且让其于Jenkins进行结合。这样既不会影响debug包，又可以进行方法数的持续监控。
关于dexcount是如何和Jenkins结合的，并且是如何产生下面的图表的，请参考：
";}i:2;i:5591;}i:87;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:53:"http://www.th7.cn/Program/Android/201606/870070.shtml";i:1;N;}i:2;i:6019;}i:88;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:6072;}i:89;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:6074;}i:90;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:43:"放弃lambda表达式，谨慎使用AspectJ";i:1;i:1;i:2;i:6074;}i:2;i:6074;}i:91;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:1;}i:2;i:6074;}i:92;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:6074;}i:93;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:345:"目前android不支持lambda，所以很多人都引入了 retrolambda。一旦你引入了这个库，你就必须面临着字节码转换而带来的build慢的问题。你用的越多，代码看起来越简单，但build时间也会越来越长。所以，我不推荐在目前的阶段使用它，还是等等看看谷歌jack的表现吧。";}i:2;i:6133;}i:94;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:6478;}i:95;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:6478;}i:96;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:295:"AspectJ是aop的很好的工具，但因为需要在build时进行代码的插入，所以使用AspectJ后build时间会明显的增加，具体看使用量而定。AspectJ的优缺点十分明显，我这里只是提出来，具体如何权衡，就看大家自己了。我的话，因为用了";}i:2;i:6480;}i:97;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:42:"https://github.com/tianzhijiexian/UiBlock/";i:1;s:7:"UiBlock";}i:2;i:6775;}i:98;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:135:"所以引入了AspectJ，让我debug是build的速度慢了三秒钟，但UiBlock的好处也十分明显，所以我还是用了它。";}i:2;i:6829;}i:99;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:6964;}i:100;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:6966;}i:101;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:33:"dev包中设置minSdkVersion为21";i:1;i:1;i:2;i:6966;}i:2;i:6966;}i:102;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:1;}i:2;i:6966;}i:103;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:6966;}i:104;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:87:"因为在debug时，我们不会去开启混淆，所以debug包是需要用mulitdex的";}i:2;i:7015;}i:105;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:7102;}i:106;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:7102;}i:107;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:221:"android5.0对于mulitdex做了优化，具体可以参考官方的文章，我就直接说怎么做就好。先在gradle的配置中添加一个flavors，比如叫做dev，在dev中配置最小支持的android版本为21.";}i:2;i:7105;}i:108;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:7326;}i:109;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:7326;}i:110;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:107:"然后在build时选中devDebug，这样你debug的时候就是走最低支持api为21的编译方式了。";}i:2;i:7329;}i:111;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:7436;}i:112;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:12:"wrap_divwrap";i:1;a:2:{i:0;i:1;i:1;s:21:"center round info 60%";}i:2;i:1;i:3;s:28:"<WRAP center round info 60%>";}i:2;i:7440;}i:113;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:7440;}i:114;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:15:"特别注意：";}i:2;i:7469;}i:115;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:7485;}i:116;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:12:"wrap_divwrap";i:1;a:2:{i:0;i:4;i:1;s:0:"";}i:2;i:4;i:3;s:7:"</WRAP>";}i:2;i:7485;}i:117;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:7485;}i:118;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:324:"你现在为了提速将最低版本写为21，假设你最终可能支持的是16。这就有个风险点，因为as会在你写代码的时候认为你的应用就是支持21的，所以对于一些16~21的api不会有风险提示。因此使用16~21之间的api时需要人为的注意，这是最大的风险点！！！";}i:2;i:7493;}i:119;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:7817;}i:120;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:7819;}i:121;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:13:"开启offline";i:1;i:1;i:2;i:7819;}i:2;i:7819;}i:122;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:1;}i:2;i:7819;}i:123;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:7819;}i:124;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:84:"这个是最简单直接的加速方案了，效果极其明显，谁用谁知道！";}i:2;i:7847;}i:125;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:7931;}i:126;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:7943;}i:127;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:12:"优化gradle";i:1;i:2;i:2;i:7943;}i:2;i:7943;}i:128;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:2;}i:2;i:7943;}i:129;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:7943;}i:130;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:81:"gradle的各种优化配置网上已经有很多了，这里建议看这篇文章";}i:2;i:7972;}i:131;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:148:"http://mp.weixin.qq.com/s?__biz=MzA4MjU5NTY0NA==&mid=2653418586&idx=1&sn=6d85a5733bac3d1e462e908cc49d9502&scene=23&srcid=0428a5Siu61dUqDI1IyYWUaO#rd";i:1;s:12:"外部链接";}i:2;i:8053;}i:132;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:3:"：";}i:2;i:8218;}i:133;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:8221;}i:134;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:8221;}i:135;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:27:"我自己的配置如下：";}i:2;i:8223;}i:136;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:8256;}i:137;a:3:{i:0;s:4:"code";i:1;a:3:{i:0;s:227:"
org.gradle.daemon=true
org.gradle.parallel=true

# ndk
android.useDeprecatedNdk=true

org.gradle.configureondemand=truex
org.gradle.jvmargs=-Xmx3072m -XX:MaxPermSize=1024m -XX:+HeapDumpOnOutOfMemoryError -Dfile.encoding=UTF-8
";i:1;N;i:2;N;}i:2;i:8256;}i:138;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:8256;}i:139;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:173:"总的来说除了增加内存这一项感觉还有点用处外，其余配置都不痛不痒。我最后直接加了4g的内存条，一次性解决了大多数的问题。";}i:2;i:8492;}i:140;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:8665;}i:141;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:8668;}i:142;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:26:"优化crashlytics的upload";i:1;i:2;i:2;i:8668;}i:2;i:8668;}i:143;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:2;}i:2;i:8668;}i:144;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:8668;}i:145;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:725:"上面讲到的都是build过程中的提速，但打包不仅仅包含了build，还包含了混淆，签名等过程。如果你的项目用了crashlytics，crashlytics会在混淆时自动上传map文件到服务器，这样可以帮助你在分析崩溃的时候看到的是混淆前的代码和行数，十分方便。
万事有利有弊，我们项目的map文件为6m左右，crashlytics的服务器又是在国外，所以每次都会需要很长的一段时间。
优化点主要是提升上行带宽和网络速度，前者需要硬件的支持，后者可以通过vpn进行优化。在配置release包打包命令的时候，可以不用每次都把build目录删除，这在一定程度上也可解决此问题。";}i:2;i:8707;}i:146;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:9432;}i:147;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:9434;}i:148;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:50:"利用MultiChannelPackageTool进行多渠道打包";i:1;i:2;i:2;i:9434;}i:2;i:9434;}i:149;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:2;}i:2;i:9434;}i:150;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:9434;}i:151;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:163:"我们的应用可能会被分发到多个渠道，而我们又想进行多个渠道的数据分析，这就产生了目前android要打多个渠道包的现状。";}i:2;i:9497;}i:152;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:38:"http://geek.csdn.net/news/detail/76488";i:1;s:12:"这篇文章";}i:2;i:9660;}i:153;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:103:"详细的分析了国内最高效的打包方案，文章短小精干，值得一读。
我选择的是";}i:2;i:9715;}i:154;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:51:"https://github.com/seven456/MultiChannelPackageTool";i:1;s:23:"MultiChannelPackageTool";}i:2;i:9818;}i:155;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:359:"来进行打包，它的速度是最快的，而且使用方式十分的简单。他的原理是在zip文件的comment中加入渠道号，这样既可以写入渠道号又不会破坏zip的签名，因为apk本身就是一个zip文件，所以这个规则是可靠并完全适用的。
具体的原理和实现方案也不难，这里可以参考赵林写的";}i:2;i:9897;}i:156;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:104:"http://pingguohe.net/2016/03/21/Dynimac-write-infomation-into-apk.html?comefrom=http://blogread.cn/news/";i:1;s:12:"这篇文章";}i:2;i:10256;}i:157;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:21:"进行深入了解。";}i:2;i:10377;}i:158;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:10398;}i:159;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:10398;}i:160;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:24:"现在我们可以通过";}i:2;i:10401;}i:161;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:10431;}i:162;a:3:{i:0;s:4:"code";i:1;a:3:{i:0;s:47:"
MCPTool.getChannelId(context, "password", "")
";i:1;N;i:2;N;}i:2;i:10431;}i:163;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:10431;}i:164;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:250:"得到渠道名称，如果你用的是友盟来做监控和统计，那么你肯定需要在代码中设置友盟的key和channel名。通过友盟的文档和论坛我发现友盟最新的sdk提供了这样的机制，于是就有了如下代码：";}i:2;i:10487;}i:165;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:10743;}i:166;a:3:{i:0;s:4:"code";i:1;a:3:{i:0;s:321:"
// 设置key和渠道号，在application中就需要进行设置
UMAnalyticsConfig config = new UMAnalyticsConfig(context, appKey, channelId);
MobclickAgent.startWithConfigure(config);

// 得到key和渠道号
String appKey = AnalyticsConfig.getAppkey(activity);
String channel = AnalyticsConfig.getChannel(activity);
";i:1;N;i:2;N;}i:2;i:10743;}i:167;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:11075;}i:168;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:18:"采用增量编译";i:1;i:2;i:2;i:11075;}i:2;i:11075;}i:169;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:2;}i:2;i:11075;}i:170;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:11075;}i:171;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:145:"as目前已经支持了增量编译，但是效果真的很差，甚至经常会增加build时间，所以这里我还是推荐一直在更新的";}i:2;i:11106;}i:172;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:54:"http://zeroturnaround.com/software/jrebel-for-android/";i:1;s:6:"Jrebel";}i:2;i:11251;}i:173;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:637:"做增量编译的工具。我之前写《Android中UI实时预览实践》的时候就有推荐过它，只不过那时候真的太贵了。现在as出了增量编译，它也坐不住了，立刻降价，价钱还算是可以接收。至于效果嘛，我可以说是目前android增量编译做的最好的了，如果你写的是小型应用的话，效果会更好。现在它已经不用我们单独配置maven仓库了，完全和项目解耦，而且它竟然支持注解和aop，堪称黑科技！所以，如果你有心想要加快打包的速度，我强烈推荐你去试用上21天，看看它是否值得你为之付费。";}i:2;i:11316;}i:174;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:11953;}i:175;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:11960;}i:176;a:3:{i:0;s:12:"document_end";i:1;a:0:{}i:2;i:11960;}}