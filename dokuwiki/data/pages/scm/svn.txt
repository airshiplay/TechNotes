====== svn命令 ======


====== 检出代码 ======
<code bash>
svn co svn://localhost/svn/url /home/testtools --username admin
svn co http://localhost/svn/testapp --username admin
svn checkout svn://localhost/svn /home/testtools --username admin
svn checkout http://localhost/test/testapp --username admin
</code>

======= 添加新文件 =======
<code bash>
svn add test.php                  #添加test.php 
svn commit -m "添加我的测试用test.php" test.php
svn add *.php                    #添加当前目录下所有的php文件
svn commit -m "添加我的测试用全部php文件" *.php
</code>

====== 提交 ======
<code bash>
svn commit -m "提交当前目录下的全部在版本控制下的文件" *  # 注意这个*表示全部文件
svn commit -m "提交我的测试用test.php" test.php
svn commit -m "提交我的测试用test.php" -N --no-unlock test.php # 保持锁就用–no-unlock开关
svn ci -m "提交当前目录下的全部在版本控制下的文件" * # 注意这个*表示全部文件
svn ci -m "提交我的测试用test.php" test.php
svn ci -m "提交我的测试用test.php" -N --no-unlock test.php # 保持锁就用–no-unlock开关
</code>

====== 查看文件或者目录状态 =======

<code bash>
svn st 目录路径/名
svn status 目录路径/名 # 目录下的文件和子目录的状态，正常状态不显示 
　　　　　　　　　　　　　#【?：不在svn的控制中；  M：内容被修改；C：发生冲突；
　　　　　　　　　　　　　　#A：预定加入到版本库；K：被锁定】 
svn  -v 目录路径/名
svn status -v 目录路径/名 # 显示文件和子目录状态
　　　　　　　　　　　　　　#【第一列保持相同，第二列显示工作版本号，
　　　　　　　　　　　　　　　#第三和第四列显示最后一次修改的版本号和修改人】 
</code>

====== 恢复本地修改 ======
svn　revert　[--recursive]　文件名

注意: 本子命令不会存取网络，并且会解除冲突的状况。但是它不会恢复被删除的目录。
<code bash>
svn revert foo.c # 丢弃对一个文件的修改
svn revert --recursive . #恢复一整个目录的文件，. 为当前目录 
</code>

====== 不checkout而查看输出特定文件或URL的内容 ======
<code bash>
svn cat http://localhost/test/readme.txt  #
</code>


====== 创建纳入版本控制下的新目录 ======
 
<code bash>
svn mkdir newdir
svn mkdir -m "Making a new dir." svn://localhost/test/newdir 
#注：添加完子目录后，一定要回到根目录更新一下，不然在该目录下提交文件会提示“提交失败”
svn update
</code>

svn　mkdir　目录名
svn　mkdir　-m　"新增目录备注文本"　http://目录全路径




